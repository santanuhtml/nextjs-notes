			--------------------------------------
			   Next JS Miscellaneous Features
			--------------------------------------
1. App Layout
2. Head Component

===============================
1. App Layout
===============================
For App Layout we need header and footer components.
For that we need to create a folder called []components.
Under this folder create a folder called 'Header.js' and
'Footer.js'

STEP:1

root
  - []pages
  - []components
     - Header.js
     - Footer.js

CODE OF
Header.js
-------------------------------

function Header(){
    return(
        <div>
            <div className='layout-header'>Header</div>
        </div>
    )
}
export default Header;

-------------------------------

CODE OF
Footer.js
-------------------------------

function Footer(){
    return(
        <div>
            <div className='layout-footer'>Footer</div>
        </div>
    )
}
export default Footer;

-------------------------------

SETP:2
Now we will create a file called 'layout.css' under
[]styles folder and add css code for 'Header.js' and 'Footer.js'

root 
  - []pages
  - []styles
     - layout.css

CODE OF
layout.css
-------------------------------

.layout-header{
    background-color: #264653;
    color: #f4a261;
    font-size: 30px;
    text-align: center;
    padding: 30px;
}
.layout-footer{
    background-color: #264653;
    color: #e9c46a;
    font-size: 30px;
    text-align: center;
    padding: 20px;
}

-------------------------------

SETP:3
Now Header and Footer component are visible in all pages so
we will visit _app.js page

root
 []pages
  - index.js
  - _app.js

Default Code of _app.js
-------------------------------

import '../styles/globals.css'

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

export default MyApp

-------------------------------

Note: 
Here we know that if we add any component under MyApp component, 
then it will be visible in every pages.
So we will
i.  import Header and Footer Component 
ii. Add Header and Footer Component under MyApp Component
iii.import the corrosponding CSS file called 'layout.css'

Updated Code of 
_app.js
-------------------------------

import Footer from '../components/Footer'
import Header from '../components/Header'

import '../styles/layout.css'

function MyApp({ Component, pageProps }) {
  return(
    <div>
      <Header />
      <Component {...pageProps} />
      <Footer />
    </div>
  )
}

export default MyApp

-------------------------------
http://localhost:3000/

** Now we can add our project css in this 'layout.css' file.
For example our project has 'about.js' page. we can add about page
css in this 'layout.css' file.

root
 []pages
  - index.js
  - about.js

CODE OF about.js
-------------------------------

function About(){
    return(
        <div>
            <h1 className='pageTitle'>About Page</h1>
        </div>
    )  
}
export default About;

-------------------------------

CODE OF layout.css
-------------------------------

.layout-header{
    background-color: #264653;
    color: #f4a261;
    font-size: 30px;
    text-align: center;
    padding: 30px;
}
.layout-footer{
    background-color: #264653;
    color: #e9c46a;
    font-size: 30px;
    text-align: center;
    padding: 20px;
}
.pageTitle{
    font-size: 50px;
    color: #f4a261;
}

-------------------------------
http://localhost:3000/about


*** In some page we don't need Same Header & Footer section. ***
    Called Per-page Layout

For example: Sign Up page.
Using 'getLayout' function we can do it.
Lets create a page called 'signup.js' under []pages

[]pages
  - index.js
  - signup.js

CODE OF signup.js
-------------------------------

//import Footer compoentnt 
//because we will use it below
import Footer from "../components/Footer";

function Signup(){
    return(
        <div>
            <h1 className='pageTitle'>Signup Page</h1>
        </div>
    )  
}
export default Signup;

Signup.getLayout = function pageLayout(page){
    return(
        <div>
            {page}
            <Footer />
        </div>
    )
}

-------------------------------

CODE OF _app.js
-------------------------------
    
import Footer from '../components/Footer'
import Header from '../components/Header'

import '../styles/layout.css'

function MyApp({ Component, pageProps }) {
  
  //Checking different layout have or not
  if(Component.getLayout){
    return(
      <div>
        {Component.getLayout(<Component {...pageProps} />)}
      </div>
    )
  }
  //End Checking different layout have or not

  return(
    <div>
      <Header />
      <Component {...pageProps} />
      <Footer />
    </div>
  )
}

export default MyApp


-------------------------------
http://localhost:3000/signup

Note: Here we get a signup page where don't have Header section,
      Only have footer section.



===============================
2. Head Component
===============================
In sense of SEO Head Component is very important because
it provides title, page description etc.

Normally Next Js provide Head section but it has very minimum 
information, It don't show title and description about this page.
This is whay Head Component introductd.

------------
PART-I
------------
Let add title and description in about page

Code of about.js
-------------------------------

import Head from "next/head";
function About(){
    return(
        <div>
          <Head>
            <title>About page title</title>
            <meta name="description" content="About page description..." />
          </Head>
          <h1 className='pageTitle'>About Page</h1>
        </div>
    )  
}
export default About;

-------------------------------
http://localhost:3000/about

we can see title tab changed and in source code also we can see title and description

------------
PART-II
------------
If we don't need to add Header component to each page for common title and description
then we can add the common title and description in _app.js page under MyApp() component.

FULL CODE OF
_app.js
-------------------------------

// import Head for common title and description
import Head from 'next/head'

function MyApp({ Component, pageProps }) {
  return(
    <div>
      <Head>
        <title>Next JS Common title</title>
        <meta name="description" content="Next JS Common description..." />
      </Head>
      <Component {...pageProps} />
    </div>
  )
}

export default MyApp

-------------------------------
Note:
i.  So if we add a common "<Head>" Component in _app.js then it will be
    fetch every created pages if those pages dont't have "<Head/>" Component

ii. If any page have "<Head>" Componet with only title OR description, then
    missing title OR description tag information will be fetch from common "<Head/>" Component.


------------
PART-III
------------
Now we will generate title and description for dynamic pages.

root
 []pages
  - []blog
     - index.js
     - [blogId].js

CODE OF 
[blogId].js
-------------------------------

import Head from "next/head";

function Post({post}){
    return(
        <div>
            <Head>
                <title>{post.title}</title>
                <meta name="description" content={post.body} />
                {/* <meta name="description" content={post.body.slice(0, 60)} /> */}
            </Head>
            <h2>{post.id} {post.title}</h2>
            <p>{post.body}</p>
        </div>
    )
}

export default Post;

export async function getStaticPaths(){
    const response = await fetch('https://jsonplaceholder.typicode.com/posts')
    const data = await response.json()

    const paths = data.map(post =>{
        return {
            params:{
                blogId: `${post.id}`
            }
        }
    })

    return {
        paths,
        fallback: false,
    }
}

export async function getStaticProps(context){
    const {params} = context
    const response = await fetch(
        `https://jsonplaceholder.typicode.com/posts/${params.blogId}`
        )
    const data = await response.json()

    return{
        props:{
            post:data,
        },
    }
}


-------------------------------

















